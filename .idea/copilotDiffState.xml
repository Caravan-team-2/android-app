<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/smartcaravans/constat/client/main/domain/apollo/ConstatsQuery.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/smartcaravans/constat/client/main/domain/apollo/ConstatsQuery.kt" />
              <option name="originalContent" value="package smartcaravans.constat.client.main.domain.apollo&#10;&#10;            // For now, returning a placeholder that matches the structure&#10;        }&#10;    &quot;&quot;&quot;&#10;&#10;    /**&#10;     * Raw GraphQL query string for constats with pagination&#10;     */&#10;    const val PAGINATED_CONSTATS_QUERY = &quot;&quot;&quot;&#10;        query GetConstats(${'$'}pagination: PaginationInput) {&#10;            getConstats(pagination: ${'$'}pagination) {&#10;                data {&#10;                    id&#10;                    driverAId&#10;                    driverBId&#10;                    dateTime&#10;                    location&#10;                    injuredCount&#10;                    createdAt&#10;                    status&#10;                }&#10;            }&#10;        }&#10;    &quot;&quot;&quot;&#10;}&#10;" />
              <option name="updatedContent" value="package smartcaravans.constat.client.main.domain.apollo&#10;&#10;            // For now, returning a placeholder that matches the structure&#10;            ConstatsQueryResponse(&#10;                getConstats = ConstatsData(data = emptyList())&#10;            )&#10;        }&#10;    }&#10;&#10;    override fun adapter(): Adapter&lt;ConstatsQueryResponse&gt; {&#10;        return object : Adapter&lt;ConstatsQueryResponse&gt; {&#10;            override fun fromJson(reader: com.apollographql.apollo.api.json.JsonReader, customScalarAdapters: CustomScalarAdapters): ConstatsQueryResponse {&#10;                // Basic implementation - would typically use Apollo's generated adapters&#10;                return ConstatsQueryResponse(&#10;                    getConstats = ConstatsData(data = emptyList())&#10;                )&#10;            }&#10;&#10;            override fun toJson(writer: JsonWriter, customScalarAdapters: CustomScalarAdapters, value: ConstatsQueryResponse) {&#10;                // Not typically used for query responses&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun serializeVariables(&#10;        writer: JsonWriter,&#10;        customScalarAdapters: CustomScalarAdapters,&#10;        withDefaultValues: Boolean&#10;    ) {&#10;        if (pagination != null) {&#10;            writer.name(&quot;pagination&quot;)&#10;            writer.beginObject()&#10;            pagination.page?.let { &#10;                writer.name(&quot;page&quot;)&#10;                writer.value(it)&#10;            }&#10;            pagination.limit?.let { &#10;                writer.name(&quot;limit&quot;)&#10;                writer.value(it)&#10;            }&#10;            pagination.sortBy?.let { &#10;                writer.name(&quot;sortBy&quot;)&#10;                writer.value(it)&#10;            }&#10;            pagination.sortOrder?.let { &#10;                writer.name(&quot;sortOrder&quot;)&#10;                writer.value(it)&#10;            }&#10;            writer.endObject()&#10;        }&#10;    }&#10;&#10;    override fun rootField(): CompiledField {&#10;        return CompiledField.Builder(&quot;getConstats&quot;, com.apollographql.apollo.api.btypes.GraphQLObjectType(&quot;Query&quot;))&#10;            .build()&#10;    }&#10;}&#10;&#10;// Convenience methods for different constats query scenarios&#10;object ConstatsQueries {&#10;&#10;    /**&#10;     * Query for all constats without pagination&#10;     */&#10;    fun allConstats(): ConstatsQuery = ConstatsQuery()&#10;&#10;    /**&#10;     * Query for constats with pagination&#10;     */&#10;    fun constatsWithPagination(&#10;        page: Int? = null,&#10;        limit: Int? = null,&#10;        sortBy: String? = null,&#10;        sortOrder: String? = null&#10;    ): ConstatsQuery = ConstatsQuery(&#10;        PaginationInput(page, limit, sortBy, sortOrder)&#10;    )&#10;&#10;    /**&#10;     * Raw GraphQL query string for all constats&#10;     */&#10;    const val ALL_CONSTATS_QUERY = &quot;&quot;&quot;&#10;        query GetConstats {&#10;            getConstats(pagination: null) {&#10;                data {&#10;                    id&#10;                    driverAId&#10;                    driverBId&#10;                    dateTime&#10;                    location&#10;                    injuredCount&#10;                    createdAt&#10;                    status&#10;                }&#10;            }&#10;        }&#10;    &quot;&quot;&quot;&#10;&#10;    /**&#10;     * Raw GraphQL query string for constats with pagination&#10;     */&#10;    const val PAGINATED_CONSTATS_QUERY = &quot;&quot;&quot;&#10;        query GetConstats(${'$'}pagination: PaginationInput) {&#10;            getConstats(pagination: ${'$'}pagination) {&#10;                data {&#10;                    id&#10;                    driverAId&#10;                    driverBId&#10;                    dateTime&#10;                    location&#10;                    injuredCount&#10;                    createdAt&#10;                    status&#10;                }&#10;            }&#10;        }&#10;    &quot;&quot;&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>