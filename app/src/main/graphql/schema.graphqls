type KycDetails {
  id: ID!

  userId: String!

  nin: Float!

  firstName: String!

  lastName: String!

  dob: DateTime!

  sex: Sex!

  placeOfBirth: String!

  issuedAt: DateTime!

  expiresAt: DateTime!

  licenseType: LicenseType!

  licenseNumber: String!
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Sex {
  MALE

  FEMALE
}

enum LicenseType {
  A

  B

  C

  D

  E

  F
}

type InsuranceCompany {
  id: ID!

  companyName: String!

  logoId: String

  integrationId: String

  constatVehicle: [ConstatVehicle]

  users: [User]

  userInsurances: [UserInsurance]
}

type UserInsurance {
  id: ID!

  userId: String!

  carId: String!

  vehicle: Vehicle!

  user: User!

  insuranceNumber: String!

  companyId: String!

  company: InsuranceCompany!

  validFrom: DateTime!

  validTo: DateTime!
}

type Vehicle {
  id: ID!

  insurranceId: String!

  insurrance: UserInsurance!

  registrationNumber: String!

  make: String!

  model: String!

  type: String!

  constatVehicles: [ConstatVehicle]
}

type ConstatVehicle {
  id: ID!

  constatId: String!

  constat: Constat!

  vehicleId: String!

  vehicle: Vehicle!

  driverRole: DriverRole!

  insurerId: String!

  insurer: InsuranceCompany!

  insuranceNumber: String!

  licenseNumber: String!
}

enum DriverRole {
  A

  B
}

type Circumstance {
  id: ID!

  constatId: String!

  constat: Constat!

  driverId: String!

  driver: User!

  code: Float!
}

type Damage {
  id: ID!

  constatId: String!

  constat: Constat!

  driverId: String!

  driver: User!

  description: String!
}

type Observation {
  id: ID!

  constatId: String!

  constat: Constat!

  driverId: String!

  driver: User!

  note: String!
}

type Signature {
  id: ID!

  constatId: String!

  constat: Constat!

  driverId: String!

  driver: User!

  signatureType: SignatureType!

  signatureData: String!

  createdAt: DateTime!
}

enum SignatureType {
  VISUAL

  CRYPTO
}

type Constat {
  id: ID!

  driverAId: String!

  driverA: User!

  driverBId: String!

  driverB: User!

  dateTime: DateTime!

  location: String!

  injuredCount: Float!

  createdAt: DateTime!

  constatVehicles: [ConstatVehicle]

  circumstances: [Circumstance]

  damages: [Damage]

  observations: [Observation]

  signatures: [Signature]

  status: ConstatStatus!
}

enum ConstatStatus {
  SUBMITTED

  VALIDATED

  REJECTED
}

type User {
  id: ID!

  email: String!

  phoneNumber: String

  role: UserRole!

  kycId: String

  kycDetails: KycDetails

  insuranceCompanyId: String

  insuranceCompany: InsuranceCompany

  isKycVerified: Boolean!

  job: String

  isMailVerified: Boolean!

  createdAt: DateTime!

  updatedAt: DateTime!

  insurances: [UserInsurance]

  constatsAsDriverA: [Constat]

  constatsAsDriverB: [Constat]

  circumstances: [Circumstance]

  damages: [Damage]

  observations: [Observation]

  signatures: [Signature]
}

enum UserRole {
  USER

  ASSURER

  SUPER_ADMIN
}

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

type VerifyIdentityOutput {
  id: ID!

  userId: String!

  nin: Float!

  firstName: String!

  lastName: String!

  dob: DateTime!

  sex: Sex!

  placeOfBirth: String!

  issuedAt: DateTime!

  expiresAt: DateTime!

  licenseType: LicenseType!

  licenseNumber: String!

  isVerified: Boolean!
}

type PaginationMeta {
  """
  Total number of items
  """
  total: Int!

  """
  Current page number
  """
  page: Int!

  """
  Number of items per page
  """
  limit: Int!

  """
  Total number of pages
  """
  totalPages: Int!
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

type PaginatedConstats {
  """
  Pagination metadata
  """
  meta: PaginationMeta!

  """
  List of items
  """
  data: [Constat!]!
}

type ConstatStatusOutput {
  status: ConstatStatus!

  message: String
}

type Query {
  me: User!

  """
  Get all constats of the current user
  """
  getConstats(pagination: PaginationInput!): PaginatedConstats!

  """
  Check the status of a constat by vehicle IDs
  """
  checkStatusByVehicleIds(vehicleAId: String!, vehicleBId: String!): ConstatStatusOutput!

  findOne(companyId: ID!): InsuranceCompany!

  findAll: [InsuranceCompany!]!

  usersInsurrances: [UserInsurance!]!

  userInsurrances: [UserInsurance!]!
}

input PaginationInput {
  """
  Page number (min: 1)
  """
  page: Int = 1

  """
  Items per page (1â€“100)
  """
  limit: Int = 10
}

type Mutation {
  updateMe(user: UpdateUserInputType!): User!

  deleteMe: Boolean!

  """
  Verify identity document using AI (OCR + KYC).
  """
  verifyIdentity(input: VerifyIdentityInput!): VerifyIdentityOutput!

  addInsurranceCompany(companyId: String!): InsuranceCompany!

  updateUserInsurrance(updateUserInsurranceInput: UpdateUserInsurranceInput!): UserInsurance!
}

input UpdateUserInputType {
  phoneNumber: String

  job: String
}

input VerifyIdentityInput {
  documentId: String!
}

input UpdateUserInsurranceInput {
  """
  Example field (placeholder)
  """
  exampleField: Int

  id: Int!
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  isOneOf: Boolean
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

schema {
  query: Query
  mutation: Mutation
}
